{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"set",
				"setsize"
			],
			[
				"n",
				"N"
			],
			[
				"Project",
				"Project4"
			],
			[
				"ret",
				"returnCode"
			],
			[
				"Ast",
				"AstNode"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "//\n// Project4.cpp\n//\n// \n// \n// Christopher Root, 2006\n// Minor Modifications by Donald House, 2009\n// Minor Modifications by Yujie Shu, 2012\n// Minor Modifications by Yitian Li, 2016\n//\n\n#include \"Camera.h\"\n#include \"Gauss.h\"\n#include \"StateVector.h\"\n#include <vector>\n#ifdef __APPLE__\n#  include <GLUT/glut.h>\n#else\n#  include <GL/glut.h>\n#endif\n\n\n#define STARTX -10.0\n#define STARTY -10.0\n#define STARTZ -10.0\n#define radius 1.0\n#define MAXSTEPS  10000\nint WIDTH = 800;\nint HEIGHT = 600;\n\nint persp_win;\n\nCamera *camera;\n\nbool showGrid = true;\nbool Stopped =true;\n\nstatic Vector3d V0;\nstatic Vector3d Wind;\nstatic Vector3d G;\nstatic Vector3d Stone;\nstatic double StoneRadius;\nstatic std::vector<Vector3d> Particles;\nstatic std::vector<Vector3d> ParticlesVelocity;\nstatic std::vector<Vector3d> ParticlesColor;\nstatic std::vector<Vector3d> ParticlesAcceleration;\nstatic std::vector<double> ParticlesLife;\nstatic std::vector<double> ParticlesMass;\nstatic std::vector<double> ParticlesBorntime;\n\nstatic char *ParamFilename = NULL;\nstatic int TotalNum;\nstatic double Mass;\nstatic double Viscosity;\nstatic double TimeStep;\nstatic double DispTime;\nstatic double CoeffofRestitution;\nstatic double Fraction;\nstatic double Time = 0;\nstatic double epsilon;\nstatic double Ka;\nstatic double Kv;\nstatic double Kc;\nstatic int TimerDelay;\nstatic int TimeStepsPerDisplay;\nstatic int NSteps = 0;\nstatic int NTimeSteps = -1;\nstatic int Collision[MAXSTEPS];\nbool resting=false;\nbool restingflag[6]={true,true,true,true,true,true},totalresting=false;\n\nGLuint Texture;\n\nvoid TimerCallback(int value);\n\n// draws a simple grid\nvoid makeGrid() {\n\tglColor3f(0.0, 0.0, 0.0);\n\n\tglLineWidth(1.0);\n\n\tfor (float i=-12; i<12; i+=2) {\n\t\tfor (float j=-12; j<12; j+=2) {\n\t\t\t\n\t\t\tglBegin(GL_LINES);\n\t\t\tglVertex3f(i, j, -12);\n\t\t\tglVertex3f(i, j+2, -12);\n\t\t\tglEnd();\n\t\t\tglBegin(GL_LINES);\n\t\t\tglVertex3f(i, j, -12);\n\t\t\tglVertex3f(i+2, j, -12);\n\t\t\tglEnd();\n\t\t\t\n\t\t\t\n\t\t\tglBegin(GL_LINES);\n\t\t\tglVertex3f(-12, i, j);\n\t\t\tglVertex3f(-12, i, j+2);\n\t\t\tglEnd();\n\t\t\tglBegin(GL_LINES);\n\t\t\tglVertex3f(-12, i, j);\n\t\t\tglVertex3f(-12, i+2, j);\n\t\t\tglEnd();\n\n\t\t\t\n\t\t\tglBegin(GL_LINES);\n\t\t\tglVertex3f(i, -12, j);\n\t\t\tglVertex3f(i, -12, j+2);\n\t\t\tglEnd();\n\t\t\tglBegin(GL_LINES);\n\t\t\tglVertex3f(i, -12, j);\n\t\t\tglVertex3f(i+2, -12, j);\n\t\t\tglEnd();\n\n\n\n\t\t\tif (j == -10){\n\t\t\t\tglBegin(GL_LINES);\n\t\t\t\tglVertex3f(i, 12, j-2);\n\t\t\t\tglVertex3f(i+2, 12, j-2);\n\t\t\t\tglEnd();\n\n\t\t\t\tglBegin(GL_LINES);\n\t\t\t\tglVertex3f(12, i, j-2);\n\t\t\t\tglVertex3f(12, i+2, j-2);\n\t\t\t\tglEnd();\n\t\t\t\t\n\t\t\t\tglBegin(GL_LINES);\n\t\t\t\tglVertex3f(i, -12, -j+2);\n\t\t\t\tglVertex3f(i+2,-12, -j+2);\n\t\t\t\tglEnd();\n\t\t\t}\n\t\t\t\n\t\t\tif (i == -10){\t\t    \n\t\t \t\tglBegin(GL_LINES);\n\t\t\t\tglVertex3f(i-2, j, 12);\n\t\t\t\tglVertex3f(i-2, j+2, 12);\n\t\t\t\tglEnd();\n\t\t\t\t\n\t\t\t\tglBegin(GL_LINES);\n\t\t\t\tglVertex3f(i-2, 12, j);\n\t\t\t\tglVertex3f(i-2, 12, j+2);\n\t\t\t\tglEnd();\n\n        glBegin(GL_LINES);\n        glVertex3f(-i+2, -12, j);\n        glVertex3f(-i+2, -12, j+2);\n        glEnd();\n\t    \t}\n    \t}\n\t}\n\n}\n\n\n\n\n/*\n Load parameter file and reinitialize global parameters\n */\nvoid LoadParameters(char *filename){\n  \n  FILE *paramfile;\n  \n  if((paramfile = fopen(filename, \"r\")) == NULL){\n    fprintf(stderr, \"error opening parameter file %s\\n\", filename);\n    exit(1);\n  }\n  \n  ParamFilename = filename;\n  \n  if(fscanf(paramfile, \"%d %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf\",\n            &TotalNum, &Mass, &TimeStep, &DispTime, &(Wind.x), &(Wind.y), &(Wind.z),&(G.x),&(G.y),&(G.z),&epsilon) != 11){\n    fprintf(stderr, \"error reading parameter file %s\\n\", filename);\n    exit(1);\n  }\n  \n  fclose(paramfile);\n  \n  TimeStepsPerDisplay = Max(1, int(DispTime / TimeStep + 0.5));\n  TimerDelay = int(0.5 * TimeStep * 1000);\n}\nvoid do_lights()\n{\n  float light0_ambient[] = { 1.0, 1.0, 1.0, 1.0 };\n  float light0_diffuse[] = { 1.0, 1.0, 1.0, 1.0 }; \n  float light0_specular[] = { 1.0, 1.0, 1.0, 1.0 }; \n  float light0_position[] = { 15.0, 15.0, 15.0, 0.0 };\n  float light0_direction[] = { -1.0, -1.0, -1.0, 1.0};\n\n  glLightfv(GL_LIGHT0,GL_AMBIENT,light0_ambient); \n  glLightfv(GL_LIGHT0,GL_DIFFUSE,light0_diffuse); \n  glLightfv(GL_LIGHT0,GL_SPECULAR,light0_specular); \n  glLightfv(GL_LIGHT0,GL_POSITION,light0_position);\n  glLightfv(GL_LIGHT0,GL_SPOT_DIRECTION,light0_direction);\n  glEnable(GL_LIGHT0);\nglEnable(GL_LIGHTING);\n}\n\nvoid DrawParticles()\n{\n  \n  glClear(GL_COLOR_BUFFER_BIT);\n  \n  //TODO:Draw the CUBE\n\n  glutPostRedisplay();\n  \n\n  //????what is this?\n  if(NSteps > MAXSTEPS){\n    cerr << \"Particle position table overflow, restarting!!\" << endl;\n    Time = 0;\n    NSteps = 0;\n  }\n}\n\n\nvoid Restart(){\n  \n  LoadParameters(ParamFilename); // reload parameters in case changed\n\n  NTimeSteps = -1;\n  glutIdleFunc(NULL);\n  Time = 0;\n  //TODO:Vertex clear,& reserve the room;\n\n  DrawParticles();\n}\n\n/*\n Initialize the Simulation\n */\nvoid InitSimulation(int argc, char* argv[]){\n  \n  if(argc != 2){\n    fprintf(stderr, \"usage: Project4 paramfile\\n\");\n    exit(1);\n  }\n  \n  LoadParameters(argv[1]);\n  \n  NSteps = 0;\n  NTimeSteps = -1;\n  Time = 0;\n  \n  //TODO:Vertex clear\n}\n\n\n\n//TODO: Acceleration\nStateVector Acceleration(StateVector S, double t)\n{\n  StateVector Sdot;\n  Sdot.setsize(S.N);\n  Vector3d fij;\n  for(int i=0;i<S.N;i++){\n    Sdot[N+i]=0;\n  }\n  for(int i=0;i<S.N;i++){\n    //Spring force;\n    fij=0;\n    Sdot[S.N+i]=Sdot[S.N+i]+fij;\n  }\n  return Sdot;\n}\n\n\n/////////TODO: Force:\nStateVector Force(StateVector S, double t)\n{\n  StateVector Sdot;\n  Sdot.setsize(S.N);\n\n  Sdot=Acceleration(Sdot,t);\n\n  for(int i=0;i<S.N;i++){\n    Sdot[i]=S[N+i];\n  }\n  return Sdot;\n}\n\nStateVector Euler(StateVector S,StateVector Sdot)\n{\n  StateVector Snew;\n  Snew=S+Sdot*TimeStep;\n  return Snew;\n}\n\ndouble min(double a, double b){\n  if (a<b)return a; else return b;\n}\n\nvoid Simulate()\n{\n\n\n\n  Time += TimeStep;\n  NTimeSteps++;\n  DrawParticles();\n  if (!Stopped)\n    glutTimerFunc(TimerDelay, TimerCallback, 0);\n}\n\n\nvoid TimerCallback(int timertype)\n{\n  switch(timertype){\n    case 0:\n      Simulate();\n      break;\n  }\n}\n\n\n\nvoid do_material()\n{\nfloat mat_ambient[] = {0.1,0.1,0.1,1.0}; \nfloat mat_diffuse[] = {0.4,0.4,0.4,1.0}; \nfloat mat_specular[] = {0.4,0.4,0.4,1.0};\nfloat mat_shininess[] = {1.0}; \n\nglMaterialfv(GL_FRONT,GL_AMBIENT,mat_ambient);\nglMaterialfv(GL_FRONT,GL_DIFFUSE,mat_diffuse);\nglMaterialfv(GL_FRONT,GL_SPECULAR,mat_specular);\nglMaterialfv(GL_FRONT,GL_SHININESS,mat_shininess);\n\n}\n\n\nvoid PerspDisplay() {\n  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\n  camera->PerspectiveDisplay(WIDTH, HEIGHT);\n\n  glMatrixMode(GL_MODELVIEW);\n  DrawParticles();\n  glLoadIdentity();\n  if (showGrid){ \n    glDisable(GL_LIGHT0);\n    makeGrid();\n    glEnable(GL_LIGHT0);\n  }\n \n  \n  glutSwapBuffers();\n}\n\nvoid mouseEventHandler(int button, int state, int x, int y) {\n  // let the camera handle some specific mouse events (similar to maya)\n  camera->HandleMouseEvent(button, state, x, y);\n  glutPostRedisplay();\n}\n\nvoid motionEventHandler(int x, int y) {\n  // let the camera handle some mouse motions if the camera is to be moved\n  camera->HandleMouseMotion(x, y);\n  glutPostRedisplay();\n}\n\n\n\nvoid keyboardEventHandler(unsigned char key, int x, int y) {\n  switch (key) {\n  case 'r': case 'R':\n    // reset the camera to its initial position\n    camera->Reset();\n    break;\n  case 'f': case 'F':\n    camera->Reset();\n    break;\n  case 'g': case 'G':\n    showGrid = !showGrid;\n    break;\n  case 's': case 'S':\n    Restart();\n    if (Stopped){\n      glutTimerFunc(1,TimerCallback,0);\n      Stopped=!Stopped;\n    }\n    break;\n  case 't': case 'T':\n    Stopped=TRUE;\n    break;\n      \n  case 'q': case 'Q':\t// q or esc - quit\n  case 27:\t\t// esc\n    exit(0);\n  }\n\n  glutPostRedisplay();\n}\n\nvoid init() {\n  // set up camera\n  // parameters are eye point, aim point, up vector\n  camera = new Camera(Vector3d(0, 5, 50), Vector3d(0, 0, 0), \n          Vector3d(0, 1, 0));\n  // grey background for window\n  glClearColor(0.62, 0.62, 0.62, 0.0);\n  glShadeModel(GL_SMOOTH);\n  glEnable(GL_TEXTURE_2D);\n  glEnable(GL_DEPTH_TEST);\n  glEnable(GL_NORMALIZE);\n  glEnable(GL_POINT_SMOOTH);\n  glHint(GL_POINT_SMOOTH_HINT, GL_NICEST);\n\n}\n\nint main(int argc, char *argv[]) {\n\n  // set up opengl window\n  glutInit(&argc, argv);\n  glutInitDisplayMode(GLUT_RGBA | GLUT_DEPTH | GLUT_DOUBLE);\n  glutInitWindowSize(WIDTH, HEIGHT);\n  glutInitWindowPosition(50, 50);\n  persp_win = glutCreateWindow(\"Project2\");\n\n\n  // initialize the camera and such\n  init();\n  InitSimulation(argc, argv);\n  \n  // set up opengl callback functions\n  glutDisplayFunc(PerspDisplay);\n  glutMouseFunc(mouseEventHandler);\n  glutMotionFunc(motionEventHandler);\n  glutKeyboardFunc(keyboardEventHandler);\n\n  do_material();\n  do_lights();\n\n  glutMainLoop();\n  return(0);\n}\n\n",
			"file": "Project4.cpp",
			"file_size": 8590,
			"file_write_time": 131218011190000000,
			"settings":
			{
				"buffer_size": 8666,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "StateVector.cpp",
			"settings":
			{
				"buffer_size": 3454,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 87.0,
		"last_filter": "Package Control: install",
		"selected_items":
		[
			[
				"Package Control: install",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			]
		],
		"width": 384.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)",
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)",
			"import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/yitianli/Src/8170/8170/project4"
	],
	"file_history":
	[
		"/Users/yitianli/.vimrc",
		"/Users/yitianli/Src/8270/8270Assets-2016/projects/3/astCalc/ast.cpp",
		"/Users/yitianli/Src/8270/8270Assets-2016/projects/3/astCalc/parse.y",
		"/Users/yitianli/Src/8270/8270Assets-2016/projects/3/astCalc/main.cpp",
		"/Users/yitianli/Src/8270/8270Assets-2016/projects/3/astCalc/scan.l",
		"/Users/yitianli/Src/8270/8270Assets-2016/projects/3/astCalc/parse.tab.cpp",
		"/Users/yitianli/Src/8270/8270Assets-2016/projects/3/astCalc/parse.tab.hpp",
		"/Users/yitianli/Downloads/hep-th/hep-th.net",
		"/Users/yitianli/Downloads/CSphd/CSphd.net",
		"/Users/yitianli/Downloads/ml-10M100K/movies.dat",
		"/Users/yitianli/Downloads/ml-10M100K/tags.dat",
		"/Users/yitianli/Downloads/ml-10M100K/ratings.dat",
		"/Users/yitianli/Downloads/ml-100k/README",
		"/Users/yitianli/Downloads/foldoc.net",
		"/Users/yitianli/Downloads/Days.net",
		"/Users/yitianli/Downloads/twitter/12831.edges",
		"/Users/yitianli/Downloads/DaysAll.net",
		"/Users/yitianli/Downloads/soc-Slashdot0811.txt",
		"/Users/yitianli/Downloads/ml-100k/ua.base"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"Acceleration",
			"std",
			"clang",
			"mass",
			"int yywrap",
			"272",
			"1882",
			"robert",
			" gei s t",
			"robert",
			"godfather",
			"redemption",
			"romantic",
			"strike"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "Project4.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8666,
						"regions":
						{
						},
						"selection":
						[
							[
								5734,
								5734
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3508.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "StateVector.cpp",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 3454,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1064.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 25.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "project4.sublime-project",
	"replace":
	{
		"height": 46.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
